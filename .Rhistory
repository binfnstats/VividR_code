aucVals = matrix(data = 0,
nrow = k,
ncol = repB)
timeVals = matrix(data = 0,
nrow = k,
ncol = repB)
kFolds = list()
# Repetition
set.seed(1234)
for(i in 1:repB){
kFold = createFolds(y,
k = k,
list = TRUE,
returnTrain = FALSE)
for(j in 1:k){
trainTest = unlist(kFold[-j])
xTrain <- x[trainTest,]
yTrain <- y[trainTest]
xTest <- x[-trainTest,]
yTest <- y[-trainTest]
# Preprocess
preProcValues = preProcess(xTrain, method = c("center", "scale"))
xTrain = predict(preProcValues, xTrain)
xTest = predict(preProcValues, xTest)
# VIVID
rdsFile = paste0("D:/FinalVividResults/vividApple_",i,j,".rds")
vivid.leuk = readRDS(file = rdsFile)
# VIVID Results
newX = xTrain[,unlist(vivid.leuk$optModel) == 1]
vividGLM = cv.glmnet(newX,
yTrain,
alpha = 0,
family = "binomial")
newXTest = xTest[,unlist(vivid.leuk$optModel) == 1]
vividPred = predict(vividGLM,
s = "lambda.min",
newx = newXTest)
vividFitted = c(exp(vividPred)/(1+exp(vividPred)))
# Results
modelPred = 1*(vividFitted > 0.5)
responseBinary = 1*(yTest == "AML")
accVals[j, i] = mean(1*(modelPred == responseBinary))
vividRoc = pROC::roc(responseBinary, vividFitted)
aucVals[j, i] = vividRoc$auc
timeVals[j, i] = time$toc - time$tic
rdsFile = paste0("D:/FinalVividResults/vividApple_",i,j,".rds")
saveRDS(vivid.leuk, file = rdsFile)
rm(vivid.leuk)
}
kFolds[[i]] = kFold
}
accVals = matrix(data = 0,
nrow = k,
ncol = repB)
aucVals = matrix(data = 0,
nrow = k,
ncol = repB)
timeVals = matrix(data = 0,
nrow = k,
ncol = repB)
kFolds = list()
# Repetition
set.seed(1234)
for(i in 1:repB){
kFold = createFolds(y,
k = k,
list = TRUE,
returnTrain = FALSE)
for(j in 1:k){
trainTest = unlist(kFold[-j])
xTrain <- x[trainTest,]
yTrain <- y[trainTest]
xTest <- x[-trainTest,]
yTest <- y[-trainTest]
# Preprocess
preProcValues = preProcess(xTrain, method = c("center", "scale"))
xTrain = predict(preProcValues, xTrain)
xTest = predict(preProcValues, xTest)
# VIVID
rdsFile = paste0("D:/FinalVividResults/vividApple_",i,j,".rds")
vivid.leuk = readRDS(file = rdsFile)
# VIVID Results
newX = xTrain[,unlist(vivid.leuk$optModel) == 1]
vividGLM = cv.glmnet(newX,
yTrain,
alpha = 0,
family = "binomial")
newXTest = xTest[,unlist(vivid.leuk$optModel) == 1]
vividPred = predict(vividGLM,
s = "lambda.min",
newx = newXTest)
vividFitted = c(exp(vividPred)/(1+exp(vividPred)))
# Results
modelPred = 1*(vividFitted > 0.5)
responseBinary = 1*(yTest == "AML")
accVals[j, i] = mean(1*(modelPred == responseBinary))
vividRoc = pROC::roc(responseBinary, vividFitted)
aucVals[j, i] = vividRoc$auc
rm(vivid.leuk)
}
kFolds[[i]] = kFold
}
vividAUC = apply(X = aucVals,
MARGIN = 2,
FUN = mean)
RFAUC = apply(X = aucValsRF,
MARGIN = 2,
FUN = mean)
SVMAUC = apply(X = aucValsSVM,
MARGIN = 2,
FUN = mean)
dfAUC = data.frame(VIVID = vividAUC, RandomForest = RFAUC, SVM = SVMAUC) %>%
reshape2::melt()
colnames(dfAUC) = c("Method", "AUC value")
ggplot(data = dfAUC,
mapping = aes(x = Method, y = `AUC value`)) +
geom_boxplot() +
ylim(0.75, 1)
ggsave("AUCleuk.jpg",
plot = last_plot(),
path = "D:/FinalVividResults/")
# ACC
vividACC = apply(X = accVals,
MARGIN = 2,
FUN = mean)
RFACC = apply(X = accValsRF,
MARGIN = 2,
FUN = mean)
SVMACC = apply(X = accValsSVM,
MARGIN = 2,
FUN = mean)
dfACC = data.frame(VIVID = vividACC, RandomForest = RFACC, SVM = SVMACC) %>%
reshape2::melt()
colnames(dfACC) = c("Method", "ACC value")
ggplot(data = dfACC,
mapping = aes(x = Method, y = `ACC value`)) +
geom_boxplot() +
ylim(0.75, 1)
ggsave("ACCleuk.jpg",
plot = last_plot(),
path = "D:/FinalVividResults/")
# Time
vividTime = apply(X = timeVals,
MARGIN = 2,
FUN = mean)
RFTime = apply(X = timeValsRF,
MARGIN = 2,
FUN = mean)
SVMTime = apply(X = timeValsSVM,
MARGIN = 2,
FUN = mean)
dfTime = data.frame(VIVID = vividTime, RandomForest = RFTime, SVM = SVMTime) %>%
reshape2::melt()
colnames(dfTime) = c("Method", "Time value")
ggplot(data = dfTime,
mapping = aes(x = Method, y = `Time value`)) +
geom_boxplot() +
ylim(0, 20)
ggsave("Timeleuk.jpg",
plot = last_plot(),
path = "D:/FinalVividResults/")
accValsRF
aucValsRF
i = 1
j = 1
kFold = kFolds[[i]]
trainTest = unlist(kFold[-j])
xTrain <- x[trainTest,]
yTrain <- y[trainTest]
xTest <- x[-trainTest,]
yTest <- y[-trainTest]
# Preprocess
preProcValues = preProcess(xTrain, method = c("center", "scale"))
xTrain = predict(preProcValues, xTrain)
xTest = predict(preProcValues, xTest)
# Random forest
tic()
rf.leuk = train(xTrain,
yTrain,
method = "rf",
trControl = trainControl(method = "none"))
time = toc()
predRF = predict(rf.leuk,
newdata = xTest,
type = "prob")[,2]
modelPred = 1*(vividFitted > 0.5)
responseBinary = 1*(yTest == "AML")
pROC::roc(responseBinary, predRF)
plot(pROC::roc(responseBinary, predRF))
predRF
modelPred = 1*(predRF > 0.5)
pROC::roc(responseBinary, predRF)
mean(1*(modelPred == responseBinary))
rf.leuk
plot(rf.leuk)
plot(rf.leuk$finalModel)
rf.leuk
k = 5
repB = 20 # Changed
setSeed = 1234567
nCores =  parallel::detectCores() - 1
# Load dataset
data("diaplasma")
x <- diaplasma$dataMatrix
y <- diaplasma$sampleMetadata$type
df = data.frame(x, y)
# Results
accVals = matrix(data = 0,
nrow = k,
ncol = repB)
aucVals = matrix(data = 0,
nrow = k,
ncol = repB)
timeVals = matrix(data = 0,
nrow = k,
ncol = repB)
kFolds = list()
# Repetition
set.seed(1234)
for(i in 1:repB){
kFold = createFolds(y,
k = k,
list = TRUE,
returnTrain = FALSE)
# VIVID
for(j in 1:k){
trainTest = unlist(kFold[-j])
xTrain <- x[trainTest,]
yTrain <- y[trainTest]
xTest <- x[-trainTest,]
yTest <- y[-trainTest]
# Preprocess
preProcValues = preProcess(xTrain, method = c("center", "scale"))
xTrain = predict(preProcValues, xTrain)
xTest = predict(preProcValues, xTest)
# VIVID
tic()
vivid.diap = VIVID::vivid(x = xTrain,
y = yTrain,
bootstraps = 100,
cores = nCores,
seed = setSeed,
compareMethod = "AIC")
time = toc()
# VIVID Results
newX = xTrain[,unlist(vivid.diap$optModel) == 1]
vividGLM = cv.glmnet(newX,
yTrain,
alpha = 0,
family = "binomial")
newXTest = xTest[,unlist(vivid.diap$optModel) == 1]
vividPred = predict(vividGLM,
s = "lambda.min",
newx = newXTest)
vividFitted = c(exp(vividPred)/(1+exp(vividPred)))
# Results
modelPred = 1*(vividFitted > 0.5)
responseBinary = 1*(yTest == "T2")
accVals[j, i] = mean(1*(modelPred == responseBinary))
vividRoc = pROC::roc(responseBinary, vividFitted)
aucVals[j, i] = vividRoc$auc
timeVals[j, i] = time$toc - time$tic
rdsFile = paste0("D:/FinalVividResults/diap/vividDiap_",i,j,".rds")
saveRDS(vivid.diap, file = rdsFile)
rm(vivid.diap)
}
kFolds[[i]] = kFold
}
aucFile = paste0("D:/FinalVividResults/diap/vividDiapAUC.rds")
saveRDS(aucVals, file = aucFile)
accFile = paste0("D:/FinalVividResults/diap/vividDiapACC.rds")
saveRDS(accVals, file = accFile)
timeFile = paste0("D:/FinalVividResults/diap/vividDiapTIME.rds")
saveRDS(timeVals, file = timeFile)
aucVals
accVals
### Random Forest
accValsRF = matrix(data = 0,
nrow = k,
ncol = repB)
aucValsRF = matrix(data = 0,
nrow = k,
ncol = repB)
timeValsRF = matrix(data = 0,
nrow = k,
ncol = repB)
set.seed(1234)
for(i in 1:repB){
kFold = kFolds[[i]]
for(j in 1:k){
trainTest = unlist(kFold[-j])
xTrain <- x[trainTest,]
yTrain <- y[trainTest]
xTest <- x[-trainTest,]
yTest <- y[-trainTest]
# Preprocess
preProcValues = preProcess(xTrain, method = c("center", "scale"))
xTrain = predict(preProcValues, xTrain)
xTest = predict(preProcValues, xTest)
# Random forest
tic()
rf.diap = train(xTrain,
yTrain,
method = "rf",
trControl = trainControl(method = "none"))
time = toc()
predRF = predict(rf.diap,
newdata = xTest,
type = "prob")[,2]
modelPred = 1*(vividFitted > 0.5)
responseBinary = 1*(yTest == "T2")
accValsRF[j, i] = mean(1*(modelPred == responseBinary))
RFRoc = pROC::roc(responseBinary, predRF)
aucValsRF[j, i] = RFRoc$auc
timeValsRF[j, i] = time$toc - time$tic
}
}
aucFile = paste0("D:/FinalVividResults/diap/RFSacAUC.rds")
saveRDS(aucValsRF, file = aucFile)
accFile = paste0("D:/FinalVividResults/diap/RFSacACC.rds")
saveRDS(accValsRF, file = accFile)
timeFile = paste0("D:/FinalVividResults/diap/RFSacTIME.rds")
saveRDS(timeValsRF, file = timeFile)
### SVM
accValsSVM = matrix(data = 0,
nrow = k,
ncol = repB)
aucValsSVM = matrix(data = 0,
nrow = k,
ncol = repB)
timeValsSVM = matrix(data = 0,
nrow = k,
ncol = repB)
set.seed(1234)
for(i in 1:repB){
kFold = kFolds[[i]]
for(j in 1:k){
trainTest = unlist(kFold[-j])
xTrain <- x[trainTest,]
yTrain <- y[trainTest]
xTest <- x[-trainTest,]
yTest <- y[-trainTest]
# Preprocess
preProcValues = preProcess(xTrain, method = c("center", "scale"))
xTrain = predict(preProcValues, xTrain)
xTest = predict(preProcValues, xTest)
# Random forest
tic()
SVM.diap = train(xTrain,
yTrain,
method = "svmLinear",
trControl = trainControl(method = "none", classProbs = TRUE))
time = toc()
predSVM = predict(SVM.diap,
newdata = xTest,
type = "prob")[,2]
modelPred = 1*(predSVM > 0.5)
responseBinary = 1*(yTest == "T2")
accValsSVM[j, i] = mean(1*(modelPred == responseBinary))
SVMRoc = pROC::roc(responseBinary, predSVM)
aucValsSVM[j, i] = SVMRoc$auc
timeValsSVM[j, i] = time$toc - time$tic
}
}
aucFile = paste0("D:/FinalVividResults/diap/SVMSacAUC.rds")
saveRDS(aucValsSVM, file = aucFile)
accFile = paste0("D:/FinalVividResults/diap/SVMSacACC.rds")
saveRDS(accValsSVM, file = accFile)
timeFile = paste0("D:/FinalVividResults/diap/SVMSacTIME.rds")
saveRDS(timeValsSVM, file = timeFile)
#### Combine and plot results
# AUC
vividAUC = apply(X = aucVals,
MARGIN = 2,
FUN = mean)
RFAUC = apply(X = aucValsRF,
MARGIN = 2,
FUN = mean)
SVMAUC = apply(X = aucValsSVM,
MARGIN = 2,
FUN = mean)
dfAUC = data.frame(VIVID = vividAUC, RandomForest = RFAUC, SVM = SVMAUC) %>%
reshape2::melt()
colnames(dfAUC) = c("Method", "AUC value")
ggplot(data = dfAUC,
mapping = aes(x = Method, y = `AUC value`)) +
geom_boxplot() +
ylim(0.75, 1)
ggsave("AUCdiap.jpg",
plot = last_plot(),
path = "D:/FinalVividResults/")
# ACC
vividACC = apply(X = accVals,
MARGIN = 2,
FUN = mean)
RFACC = apply(X = accValsRF,
MARGIN = 2,
FUN = mean)
SVMACC = apply(X = accValsSVM,
MARGIN = 2,
FUN = mean)
dfACC = data.frame(VIVID = vividACC, RandomForest = RFACC, SVM = SVMACC) %>%
reshape2::melt()
colnames(dfACC) = c("Method", "ACC value")
ggplot(data = dfACC,
mapping = aes(x = Method, y = `ACC value`)) +
geom_boxplot() +
ylim(0.75, 1)
ggsave("ACCdiap.jpg",
plot = last_plot(),
path = "D:/FinalVividResults/")
# Time
vividTime = apply(X = timeVals,
MARGIN = 2,
FUN = mean)
RFTime = apply(X = timeValsRF,
MARGIN = 2,
FUN = mean)
SVMTime = apply(X = timeValsSVM,
MARGIN = 2,
FUN = mean)
dfTime = data.frame(VIVID = vividTime, RandomForest = RFTime, SVM = SVMTime) %>%
reshape2::melt()
colnames(dfTime) = c("Method", "Time value")
ggplot(data = dfTime,
mapping = aes(x = Method, y = `Time value`)) +
geom_boxplot() +
ylim(0, 20)
ggsave("Timediap.jpg",
plot = last_plot(),
path = "D:/FinalVividResults/")
aucValsRF
accValsRF
aucFile = paste0("D:/FinalVividResults/vividSacAUC.rds")
aucVals = readRDS(file = aucFile)
accFile = paste0("D:/FinalVividResults/vividSacACC.rds")
accVals = readRDS(file = accFile)
timeFile = paste0("D:/FinalVividResults/vividSacTIME.rds")
timeVals = readRDS(file = timeFile)
aucFile = paste0("D:/FinalVividResults/RFSacAUC.rds")
aucValsRF = readRDS(file = aucFile)
accFile = paste0("D:/FinalVividResults/RFSacACC.rds")
accValsRF = readRDS(file = accFile)
timeFile = paste0("D:/FinalVividResults/RFSacTIME.rds")
timeValsRF = readRDS(file = timeFile)
aucFile = paste0("D:/FinalVividResults/SVMSacAUC.rds")
aucValsSVM = readRDS(file = aucFile)
accFile = paste0("D:/FinalVividResults/SVMSacACC.rds")
accValsSVM = readRDS(file = accFile)
timeFile = paste0("D:/FinalVividResults/SVMSacTIME.rds")
timeValsSVM = readRDS(file = timeFile)
vividAUC = apply(X = aucVals,
MARGIN = 2,
FUN = mean)
RFAUC = apply(X = aucValsRF,
MARGIN = 2,
FUN = mean)
SVMAUC = apply(X = aucValsSVM,
MARGIN = 2,
FUN = mean)
dfAUC = data.frame(VIVID = vividAUC, RandomForest = RFAUC, SVM = SVMAUC) %>%
reshape2::melt()
colnames(dfAUC) = c("Method", "AUC value")
ggplot(data = dfAUC,
mapping = aes(x = Method, y = `AUC value`)) +
geom_boxplot() +
ylim(0.5, 1)
ggplot(data = dfAUC,
mapping = aes(x = Method, y = `AUC value`)) +
geom_boxplot() +
ylim(0.85, 1)
vividACC = apply(X = accVals,
MARGIN = 2,
FUN = mean)
RFACC = apply(X = accValsRF,
MARGIN = 2,
FUN = mean)
SVMACC = apply(X = accValsSVM,
MARGIN = 2,
FUN = mean)
vividACC = apply(X = accVals,
MARGIN = 2,
FUN = mean)
RFACC = apply(X = accValsRF,
MARGIN = 2,
FUN = mean)
SVMACC = apply(X = accValsSVM,
MARGIN = 2,
FUN = mean)
dfACC = data.frame(VIVID = vividACC, RandomForest = RFACC, SVM = SVMACC) %>%
reshape2::melt()
colnames(dfACC) = c("Method", "ACC value")
ggplot(data = dfACC,
mapping = aes(x = Method, y = `ACC value`)) +
geom_boxplot() +
ylim(0.85, 1)
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/ggpubr")
library("ggpubr")
ggplot(data = dfACC,
mapping = aes(x = Method, y = `ACC value`)) +
geom_boxplot() +
ylim(0.85, 1)
ggbarplot(dfACC, x = "Method", y = "ACC value",
color = "white",            # Set bar border colors to white
palette = "jco",            # jco journal color palett. see ?ggpar
sort.val = "desc",          # Sort the value in dscending order
sort.by.groups = FALSE,     # Don't sort inside each group
x.text.angle = 90           # Rotate vertically x axis texts
)
?preProcess
?predict
