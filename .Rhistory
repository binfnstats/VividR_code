base::set.seed(seed)
output = base::rep(x = base::list(NA_real_),
times = groups + 1)
featureTrack = base::rep(base::list(NA_real_),
times = groups + 1)
if (disjoint == TRUE) {
groupSize = base::floor(p / groups)
remainder = p - groupSize * groups
if (remainder == 0) {
allocation = base::c(base::rep(x = 1:groups,
times = groupSize))
}
if (remainder != 0) {
allocation = base::c(base::rep(x = 1:groups,
times = groupSize), 1:remainder)
}
allocation = base::sample(x = allocation,
size = p,
replace = FALSE)
for (i in 1:groups) {
xNew = x[, allocation == i]
nVar = base::ncol(xNew)
output[[i]] = vivid(
x = xNew,
y = y,
bootstraps = bootstraps,
cores = cores,
seed = seed,
minSize = minSize,
lambda = lambda,
compareMethod = 'AIC'
)[-2]
featureTrack[[i]] = base::which(allocation == i)
}
}
if (disjoint == FALSE) {
ncol = p - base::length(repFeatures)
groupSize = base::floor(ncol / groups)
remainder = ncol - groupSize * groups
allocation = base::c(base::rep(x = 1:groups,
times = groupSize),
1:remainder)
allocation = base::sample(x = allocation,
size = ncol,
replace = FALSE)
xFixed = x[, repFeatures]
xChange = x[,-repFeatures]
for (i in 1:groups) {
xNew = base::cbind(xFixed, xChange[, allocation == i])
nVar = base::ncol(xNew)
output[[i]] = vivid(
x = xNew,
y = y,
bootstraps = bootstraps,
cores = cores,
seed = seed,
minSize = minSize,
lambda = lambda,
compareMethod = 'AIC'
)[-2]
featureTrack[[i]] = base::c(repFeatures, base::which(allocation == i))
}
}
finalPool = base::matrix(data = NA_real_,
nrow = groups,
ncol = p)
for (j in 1:groups) {
whichVar = base::unlist(output[[j]]$optModel)
finalPool = base::c(finalPool, featureTrack[[j]][whichVar])
}
finalPool = base::sort(base::unique(finalPool))
xFinal = x[, finalPool]
featureTrack[[(groups + 1)]] = finalPool
output[[(groups + 1)]] = vivid(
x = xFinal,
y = y,
bootstraps = bootstraps,
cores = cores,
seed = seed,
minSize = minSize,
lambda = lambda,
compareMethod = compareMethod,
gamma = gamma
)
output$vividSplit = TRUE
return(output)
}
check_data = function(x, y, k, repB, seed = 1234567, nCores = parallel::detectCores() - 1, methods){
df = base::data.frame(x, y)
nMethods = length(methods)
kFolds = list()
output = list()
# K-folds
set.seed(1234)
for(i in 1:repB){
kFold = createFolds(y,
k = k,
list = TRUE,
returnTrain = FALSE)
kFolds[[i]] = kFold
}
for(l in 1:nMethods){
accVals = matrix(data = 0,
nrow = k,
ncol = repB)
aucVals = matrix(data = 0,
nrow = k,
ncol = repB)
timeVals = matrix(data = 0,
nrow = k,
ncol = repB)
features = list()
for(i in 1:repB){
kFold = kFolds[[i]]
features2 = list()
for(j in 1:k){
trainTest = unlist(kFolds[[i]][-j])
xTrain = x[trainTest,]
yTrain = y[trainTest]
xTest = x[-trainTest,]
yTest = y[-trainTest]
preProcValues = caret::preProcess(xTrain, method = c("center", "scale"))
xTrain = stats::predict(preProcValues, xTrain)
xTest = stats::predict(preProcValues, xTest)
if(methods[l] == "vivid"){
tic()
vivid = VIVID::vivid(x = xTrain,
y = yTrain,
bootstraps = 10,
cores = nCores,
seed = setSeed,
compareMethod = "AIC")
time = toc()
newX = xTrain[,unlist(vivid$optModel) == 1]
vividGLM = glmnet::cv.glmnet(newX,
yTrain,
alpha = 0,
family = "binomial")
newXTest = xTest[,unlist(vivid$optModel) == 1]
vividPred = predict(vividGLM,
s = "lambda.1se",
newx = newXTest)
fitted = c(exp(vividPred)/(1+exp(vividPred)))
features2[[j]] = vivid$optFeatures
}
if(methods[l] == "rf"){
tic()
rf = randomForest::randomForest(x = xTrain,
y = yTrain,
ntree = 500)
time = toc()
fitted = predict(rf,
newdata = xTest,
type = "prob")[,2]
}
if(methods[l] == "boruta"){
tic()
boruta = Boruta::Boruta(x = xTrain,
y = yTrain,
doTrace = 0,
maxRuns = 100)
time = toc()
newX = xTrain[,boruta$finalDecision == "Confirmed"]
borutaGLM = glmnet::cv.glmnet(newX,
yTrain,
alpha = 0,
family = "binomial")
newXTest = xTest[,boruta$finalDecision == "Confirmed"]
borutaPred = predict(borutaGLM,
s = "lambda.1se",
newx = newXTest)
fitted = c(exp(borutaPred)/(1+exp(borutaPred)))
features2[[j]] = colnames(x)[which(boruta$finalDecision == "Confirmed")]
}
modelPred = 1*(fitted > 0.5)
binary = 1*(yTest == levels(y)[2])
accVals[j, i] = mean(1*(modelPred == binary))
roc = pROC::roc(binary, fitted)
aucVals[j, i] = roc$auc
timeVals[j, i] = time$toc - time$tic
}
features[[i]] = features2
}
output[[l]] = list(
acc = accVals,
auc = aucVals,
time = timeVals,
features = features
)
}
names(output) = methods
return(output)
}
library(VIVID)
library(RankProd)
library(BioMark)
library(parallel)
library(tidyverse)
library(latticeExtra)
library(biosigner)
library(tictoc)
library(pROC)
library(caret)
library(reshape2)
library(golubEsets)
k = 5
repB = 20
setSeed = 1234567
nCores =  parallel::detectCores() - 1
data(sacurine)
x = sacurine$dataMatrix
y = sacurine$sampleMetadata$gender
sacurine = check_data(x = x, y = y, k = 5, repB = 20, methods = c("vivid", "boruta"))
sacurine$vivid$acc
sacurine$boruta$acc
sacurine$boruta$auc
sacurine$vivid$auc
names(sacurine)
models = names(sacurine)
sacurine[[models]]
sacurine[[models[1]]]
sacurine[[1]]$acc
auc = matrix(data = NA_real_,
nrow = repB,
ncol = length(models))
nModels = length(models)
object = acurine
object = sacurine
models = names(object)
nModels = length(models)
auc = matrix(data = NA_real_,
nrow = repB,
ncol = nModels)
colnames(auc) = models
for (i in 1:nModels){
auc[,i] = base::apply(X = object[[i]]$auc,
MARGIN = 2,
FUN = mean)
}
auc
plotData = reshape2::melt(auc)
plotData
?ggplot
auc_plot = function(object, repB){
models = names(object)
nModels = length(models)
auc = matrix(data = NA_real_,
nrow = repB,
ncol = nModels)
base::colnames(auc) = models
for (i in 1:nModels){
auc[,i] = base::apply(X = object[[i]]$auc,
MARGIN = 2,
FUN = mean)
}
plotData = reshape2::melt(auc)
plotData$measure = "AUC"
base::colnames(plotdata) = c("Rep", "Method", "AUC")
output = ggplot2::ggplot(data = plotData,
mapping = aes(x = Method,
y = AUC)) +
geom_boxplot()
return(output)
}
auc_plot(object = sacurine, repB = 20)
auc_plot = function(object, repB){
models = names(object)
nModels = length(models)
auc = matrix(data = NA_real_,
nrow = repB,
ncol = nModels)
base::colnames(auc) = models
for (i in 1:nModels){
auc[,i] = base::apply(X = object[[i]]$auc,
MARGIN = 2,
FUN = mean)
}
plotData = reshape2::melt(auc)
plotData$measure = "AUC"
base::colnames(plotData) = c("Rep", "Method", "AUC")
output = ggplot2::ggplot(data = plotData,
mapping = aes(x = Method,
y = AUC)) +
geom_boxplot()
return(output)
}
auc_plot(object = sacurine, repB = 20)
models = names(object)
nModels = length(models)
auc = matrix(data = NA_real_,
nrow = repB,
ncol = nModels)
base::colnames(auc) = models
acc = matrix(data = NA_real_,
nrow = repB,
ncol = nModels)
base::colnames(auc) = models
for (i in 1:nModels){
auc[,i] = base::apply(X = object[[i]]$auc,
MARGIN = 2,
FUN = mean)
acc[,i] = base::apply(X = object[[i]]$auc,
MARGIN = 2,
FUN = mean)
}
plotData = reshape2::melt(auc)
plotDataACC = reshape2::melt(acc)
plotData$measure = "AUC"
base::colnames(plotData) = c("Rep", "Method", "AUC")
plotData$ACC = plotData2$value
plotData = reshape2::melt(auc)
plotDataACC = reshape2::melt(acc)
plotData$measure = "AUC"
base::colnames(plotData) = c("Rep", "Method", "AUC")
plotDataACC
plotData
plotData$'measure' = "AUC"
plotData
plotData = reshape2::melt(auc)
plotDataACC = reshape2::melt(acc)
plotData$'measure' = "AUC"
base::colnames(plotData) = c("Rep", "Method", "AUC")
plotData$'ACC' = plotDataACC$value
plotData
plotData = reshape2::melt(auc)
plotDataACC = reshape2::melt(acc)
plotData$'measure' = "AUC"
plotDataACC$'measure' = "ACC"
base::colnames(plotData) = c("Rep", "Method", "AUC")
base::colnames(plotDataACC) = c("Rep", "Method", "ACC")
plotData
plotDataACC
plotData = reshape2::melt(auc)
plotDataACC = reshape2::melt(acc)
base::colnames(plotData) = c("Rep", "Method", "AUC")
base::colnames(plotDataACC) = c("Rep", "Method", "ACC")
plotData$'measure' = "AUC"
plotDataACC$'measure' = "ACC"
plotData
plotData = reshape2::melt(auc)
plotDataACC = reshape2::melt(acc)
base::colnames(plotData) = c("Rep", "Method", "AUC")
base::colnames(plotDataACC) = c("Rep", "Method", "ACC")
plotData$'Measure' = "AUC"
plotDataACC$'Measure' = "ACC"
cbind(plotData, plotDataACC)
rbind(plotData, plotDataACC)
plotData = reshape2::melt(auc)
plotDataACC = reshape2::melt(acc)
base::colnames(plotData) = c("Rep", "Method", "Value")
base::colnames(plotDataACC) = c("Rep", "Method", "Value")
plotData$'Measure' = "AUC"
plotDataACC$'Measure' = "ACC"
rbind(plotData, plotDataACC)
?melt
plotData = reshape2::melt(auc, factorsAsStrings = FALSE)
plotDataACC = reshape2::melt(acc, factorsAsStrings = FALSE)
base::colnames(plotData) = c("Rep", "Method", "Value")
base::colnames(plotDataACC) = c("Rep", "Method", "Value")
plotData$'Measure' = "AUC"
plotDataACC$'Measure' = "ACC"
plotData
rbind(plotData, plotDataACC)
plotData$Method
plotData = reshape2::melt(auc, factorsAsStrings = TRUE)
plotDataACC = reshape2::melt(acc, factorsAsStrings = TRUE)
base::colnames(plotData) = c("Rep", "Method", "Value")
base::colnames(plotDataACC) = c("Rep", "Method", "Value")
plotData$'Measure' = "AUC"
plotDataACC$'Measure' = "ACC"
plotData$Method
plotDataACC$Method = plotDataACC$Method %>% base::toString(x = .)
plotDataAUC$Method = plotDataAUC$Method %>% base::toString(x = .)
plotDataAUC = reshape2::melt(auc, factorsAsStrings = TRUE)
plotDataACC = reshape2::melt(acc, factorsAsStrings = TRUE)
base::colnames(plotDataAUC) = c("Rep", "Method", "Value")
base::colnames(plotDataACC) = c("Rep", "Method", "Value")
plotDataAUC$'Measure' = "AUC"
plotDataACC$'Measure' = "ACC"
plotDataACC$Method = plotDataACC$Method %>% base::toString(x = .)
plotDataAUC$Method = plotDataAUC$Method %>% base::toString(x = .)
rbind(plotData, plotDataACC)
rbind(plotDataAUC, plotDataACC)
a = rbind(plotDataAUC, plotDataACC)
a$Rep
a$Method
plotDataAUC = reshape2::melt(auc, factorsAsStrings = TRUE)
plotDataACC = reshape2::melt(acc, factorsAsStrings = TRUE)
base::colnames(plotDataAUC) = c("Rep", "Method", "Value")
base::colnames(plotDataACC) = c("Rep", "Method", "Value")
plotDataAUC$'Measure' = "AUC"
plotDataACC$'Measure' = "ACC"
plotDataACC$Method = plotDataACC$Method %>% base::as.character(x = .)
plotDataAUC$Method = plotDataAUC$Method %>% base::as.character(x = .)
a = rbind(plotDataAUC, plotDataACC)
a
plotDataAUC = reshape2::melt(auc, factorsAsStrings = TRUE)
plotDataACC = reshape2::melt(acc, factorsAsStrings = TRUE)
base::colnames(plotDataAUC) = c("Rep", "Method", "Value")
base::colnames(plotDataACC) = c("Rep", "Method", "Value")
plotDataAUC$'Measure' = "AUC"
plotDataACC$'Measure' = "ACC"
plotDataAUC
plotDataACC
plotData = rbind(plotDataAUC, plotDataACC)
models = names(object)
nModels = length(models)
auc = matrix(data = NA_real_,
nrow = repB,
ncol = nModels)
base::colnames(auc) = models
acc = matrix(data = NA_real_,
nrow = repB,
ncol = nModels)
base::colnames(acc) = models
for (i in 1:nModels){
auc[,i] = base::apply(X = object[[i]]$auc,
MARGIN = 2,
FUN = mean)
acc[,i] = base::apply(X = object[[i]]$auc,
MARGIN = 2,
FUN = mean)
}
plotDataAUC = reshape2::melt(auc, factorsAsStrings = TRUE)
plotDataACC = reshape2::melt(acc, factorsAsStrings = TRUE)
base::colnames(plotDataAUC) = c("Rep", "Method", "Value")
base::colnames(plotDataACC) = c("Rep", "Method", "Value")
plotDataAUC$'Measure' = "AUC"
plotDataACC$'Measure' = "ACC"
plotData = rbind(plotDataAUC, plotDataACC)
plotData
output = ggplot2::ggplot(data = plotData,
mapping = aes(x = Measure,
y = Value,
fill = Method)) +
geom_boxplot()
output
install.packages('pamr')
library(pamr)
pamr::pamr.menu(data.frame(x,y))
x
pamr::pamr.menu(x)
?pamr
?pamr.train
pamr::pamr.menu(list(x,y))
x
a = list(x,y)
a
a = list(x = x,y = y)
a
pamr::pamr.menu(a)
pamr.train(a)
data = list(x = x,
y = y)
pamrTrain = pamr::pamr.train(data)
pamrResults = pamr::pamr.cv(fit = pamrTrain, data = data)
pamrFeatures = pamr::pamr.listgenes(pamrTrain, data,
threshold = 4.0)
pmarResults
pamrResults
pamr::pamr.listgenes(pamrTrain, data,
threshold = 4.0)
data
?pamr.listgenes
pamr::pamr.listgenes(fit = pamrTrain,
data = data,
threshold = 4.0)
pamrTrain
data
pamr::pamr.listgenes(fit = pamrTrain,
data = data,
threshold = 4.0,
fitcv = pamrResults)
plotData
output
install.packages('sigFeature')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("sigFeature")
x
sigFeature::sigFeature(X = xTrain,
Y = yTrain)
sigFeature::sigFeature(X = x,
Y = y)
object
mean(object$vivid$acc)
mean(object$boruta$acc)
mean(object$vivid$auc)
mean(object$boruta$auc)
mean(object$vivid$time)
mean(object$boruta$time)
object$vivid$features
table(unlist(object$vivid$features)
)
table(unlist(object$vivid$features)
)
a = table(unlist(object$vivid$features))
b = table(unlist(object$boruta$features))
length(a)
length(b)
count(a >= 50)/length(a)
count(a >= 50)
sum(a >= 50)
sum(a >= 50)/length(a)
sum(b >= 50)/length(b)
library(devtools)
devtools::install_github("binfnstats/VividR")
library('VividR')
library('Vivid')
library('VividR')
devtools::install_github("binfnstats/VividR")
library('VIVID')
